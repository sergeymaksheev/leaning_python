"""This is module is first modul about introdaction in OOP lessons"""

# Objects
# Объект в ОПП - это контейнер, который состоит из данных и поведения.

# Каждый объект в python пренадлежит какому-либо классу.
# Экземпляр класса - конкрентный экземляр какого-либо класса. например 4 - экземпляр класса int,
# 'a' - экземляр класса str.

# Принадлежность экземпляра к объекту можно проверить с помощью функции isinstance
print(isinstance(5, int))
# Сами классы также являются объектом.
print(type(int))
# Тип класса int - type
# Каждое значение в python  представляет собой объект.
print(isinstance(4, object))
print(isinstance(int, object))

# Типизация в python: наделяет объект определенным поведением в зависимости от его класса (встроенные методы).

# В ООП мы создает собственный класс и наделяем его определенными свойствами и поведением.


class Car:
    """Class Car"""

    model = "BMW"  # Определяем атрибуты класса. Данные атрибуты будут относиться ко всем экземплярам класса.
    engine = 1.6


car1 = Car()  # объект класса Car

print(type(car1))
print(
    isinstance(car1, Car)
)  # Проверяем, что наш объект является экземпляром класса машина.

print(car1.engine)

car2 = Car()

print(car2.model)

# car1.seat = 4  # Объявление нового атрибута объекта класса, который будет принадлежать только данному экземпляру.

print(car1.__dict__)  # Показывает личные атрибуты экземпляра класса.

car1.model = "KIA"  # Переназначение атрибута экземляра класса.
print(car1.model)

# Каждый экземпляр класса представляет собой пространства имен, которое может содержать личные атрибуты.
# Если при обращении атрибута прогламма не находит его в пространстве имен экземпляра, она обращается к
# пространству имен класса, в котором содержаться общие атрибуты для всех экземпляров класса.
